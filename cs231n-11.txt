[ cs231n 11강 ]

1. Semantic Segmentation
- No objects, just pixels
- Input : Image
- Output : decision of a category for every pixel
(픽셀별로 어떤 카테고리에 속하는지 알려줌)
- 픽셀이 어떤 것을 나타내는지 알려주지만, 개별에 대해선 분류할 수 없음
(2개 이상의 물체를 같은 것으로 인식) 
- Semantic Segmentation은 classification을 통해 진행될 수 있음
- Sliding Window Approach
-> 잘려진 patch마다 어떤 class인지 유추
-> 이 방법은 computation이 비싼 방법이고 중복되는 patch 사이에서 공유된 feature를 재사용

2. Fully Convolutional
- 3x3 filter를 사용해 이미지 크기를 유지하며 convolution에 넣음
- 한번에 모든 픽셀을 예측할 수 있도록 설계
- Output : \(C \times H \times W\)의 Tensor
- 그러나 원본 이미지를 그대로 convolution하는 것은 비싼 연산

3. Fully Convolutional with downsampling and upsampling
- max pooling 또는 strided convolution을 통해 downsampling
- unpooling을 통해 upsampling

4. Upsampling
1) Unpooling
- pooling의 반대 작업으로, unpooling 지역의 receptive field의 값을 복제
- we duplicate receptive filed of unpooling region
- 하지만 우측처럼 나머지 값이 0일 경우는 Bed of Nails
- max pooling을 할 때 max인 값을 기억했다가 Max Unpooling할 때 사용
(해당 위치 말고는 모두 0으로 채워넣음)
- fixed function
2) Transpose Convolution
- Convolution Operation은 input values와 output values 사이에 공간 연결성을 가지고 있습니다. 3x3 kernel을 사용한다면, 9개의 values가(kernel) 1개의 value(output, 문지른 후의 결과물)와 연결
- Transposed Convolution은 1개의 value를 9개의 values로 변경
- 필터의 값 사이에 0을 넣은 매트릭스를 Transpose한 후, 곱해줌

5. Classification + Localization
- Single Object
- what the category is, where is that object in the image?
- Output : Bounding Box(around the region of label), label
- localization은 regression 문제!
- Multi Task Loss를 계산
- 처음부터 학습하기 어려울 수 있으니, ImageNet의 pretrain 모델을 사용

6. Object Detection
- Computer Vision의 핵심 Task
- Multiple Object
- Output : Bounding Box(around the region of label), label

7. R-CNN
- ConvNet을 통해 나온 feature map에서 RoIs를 찾음
- RoI Pooling
- Fully Connected Layer는 Fixed size input이 필요한데, RoI Pooling이 작업을 수행
- Fast R-CNN은 여전히 Bottleneck을 보유





